openapi: 3.0.3
info:
  title: OI Essential OIDC Endpoints - OpenAPI 3.0
  description: |-
    Essential OneIdentity OpenID Connect endpoints for authentication flow

    Some useful links:
    - [One Identity repository](https://github.com/pagopa/oneidentity)
    - [The source API definition for OI](https://github.com/pagopa/oneidentity/blob/c2b7f398d36a0f259685e785c8f5a6b80ba8b9eb/src/infra/api/oi.tpl.json)
  termsOfService: http://pagopa.it/terms/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
externalDocs:
  description: Find out more about OI
  url: https://pagopa.it
servers:
  - url: ${server_url}

paths:
  /oidc/token:
    post:
      tags:
        - Token Server APIs
      description: 'Request access_token or refresh_token using OAuth 2.0 grant_type: password authorization_code refresh_token client_credentials urn:ietf:params:oauth:grant-type:jwt-bearer urn:ietf:params:oauth:grant-type:saml2-bearer. See RFC 6749 for more details.'
      operationId: createRequestToken
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - code
                - redirect_uri
                - grant_type
              properties:
                redirect_uri:
                  type: string
                  description: Required if grant_type is authorization_code. Must contain a valid auth code
                code:
                  type: string
                  description: Required if grant_type is authorization_code
                grant_type:
                  type: string
                  description: 'For grant_type=authorization_code: client_id, client_secret, code, and redirect_uri are required.'
                  enum:
                    - authorization_code
                  default: authorization_code
      parameters:
        - name: authorization
          in: header
          required: true
          description: 'The HTTP basic authorization header containing the client credentials as base64 encoded string (authorization: Basic base64(client_id:client_secret)). This can only be used INSTEAD of the parameters ''client_id'', ''client_secret''.'
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/authToken200'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/methodNotAllowed'
        "406":
          $ref: '#/components/responses/notAcceptable'
        "429":
          $ref: '#/components/responses/rateLimit'
        "500":
          $ref: '#/components/responses/serverError'
components:
  responses:
    auth302:
      description: 'Will contain either: A success response including the redirect location header to the server that handles the authentication.  The redirect parameter ''sessionData''s structure looks like the model schema shown OR ''invalid scope'' OR ''unsupported response type'' OR ''unauthorized client''. The non-successful conditions may include redirect query params as follows: ''error'', string with default value:  invalid_request ''error_description'', string with description of error ''state'', string with no default value.  It is opaque to the server and returned as received.'
      headers:
        location:
          description: 'Location (URL) includes these required parameters: action=(display or login depending on ''prompt'' and ''id_token_hint'') and sessionID and sessionData (a JWT containing a JSON message holding session data)'
          schema:
            type: string
        content-type:
          description: Content type response.
          schema:
            type: string
    responseOkHtml:
      description: OK
      headers:
        location:
          description: Response OK, serving html
          schema:
            type: string
        content-type:
          schema:
            type: string
      content:
        text/html:
          schema:
            type: string
    responseOkXml:
      description: OK
      headers:
        location:
          description: Response OK, serving xml
          schema:
            type: string
        content-type:
          schema:
            type: string
      content:
        application/xml:
          schema:
            type: string
    authToken200:
      description: A success response that includes the issued token, expire and other details from the OAuth Server
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenData'
    createdOkJson:
      description: Created
      headers:
        content-type:
          schema:
            type: string
      content:
        application/json:
          schema:
            type: string
    methodNotAllowed:
      description: The HTTP method is not valid
      headers:
        Allow:
          description: This header is required by RFC 2616 and contains a comma separated list of valid HTTP methods.
          schema:
            type: string
            default: GET
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    notAcceptable:
      description: The HyperText Transfer Protocol (HTTP) 406 Not Acceptable client error response code indicates that the server cannot produce a response matching the list of acceptable values defined in the request's proactive content negotiation headers, and that the server is unwilling to supply a default representation.
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
    rateLimit:
      description: Too many requests
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    badRequest:
      description: Bad request
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    invalidParameters:
      description: Invalid parameters | Invalid redirect_uri | invalid client type | invalid response type | invalid code_challenge/method | Bad request
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    unauthorized:
      description: The client could not be authenticated.
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    forbidden:
      description: Forbidden.
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    notFound:
      description: Not Found.
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    serverError:
      description: unknown error
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
  schemas:
    TokenData:
      type: object
      properties:
        access_token:
          type: string
          description: The Access Token for the given token request
        token_type:
          type: string
          description: The Token Type issued
          example: Bearer
        expires_in:
          type: string
          description: The expiry time, in seconds
          example: "3600"
        refresh_token:
          type: string
          description: The refresh token, if applicable
        scope:
          type: string
          description: The issued scope
          example: oob
        id_token:
          type: string
          description: If the requested SCOPE included 'msso' or 'openid', response includes an id_token
        id_token_type:
          type: string
          description: If the requested SCOPE included 'msso' or 'openid', response includes an id_token_type
      title: TokenData