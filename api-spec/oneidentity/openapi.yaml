openapi: 3.0.3
info:
  title: OI Essential OIDC Endpoints - OpenAPI 3.0
  description: |-
    Essential OneIdentity OpenID Connect endpoints for authentication flow

    Some useful links:
    - [One Identity repository](https://github.com/pagopa/oneidentity)
    - [The source API definition for OI](https://github.com/pagopa/oneidentity/blob/c2b7f398d36a0f259685e785c8f5a6b80ba8b9eb/src/infra/api/oi.tpl.json)
  termsOfService: http://pagopa.it/terms/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
externalDocs:
  description: Find out more about OI
  url: https://pagopa.it
servers:
  - url: ${server_url}

paths:
  /oidc/token:
    post:
      tags:
        - Token Server APIs
      description: 'Request access_token or refresh_token using OAuth 2.0 grant_type: password authorization_code refresh_token client_credentials urn:ietf:params:oauth:grant-type:jwt-bearer urn:ietf:params:oauth:grant-type:saml2-bearer. See RFC 6749 for more details.'
      operationId: createRequestToken
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - code
                - redirect_uri
                - grant_type
              properties:
                redirect_uri:
                  type: string
                  description: Required if grant_type is authorization_code. Must contain a valid auth code
                code:
                  type: string
                  description: Required if grant_type is authorization_code
                grant_type:
                  type: string
                  description: 'For grant_type=authorization_code: client_id, client_secret, code, and redirect_uri are required.'
                  enum:
                    - authorization_code
                  default: authorization_code
      parameters:
        - name: authorization
          in: header
          required: true
          description: 'The HTTP basic authorization header containing the client credentials as base64 encoded string (authorization: Basic base64(client_id:client_secret)). This can only be used INSTEAD of the parameters ''client_id'', ''client_secret''.'
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/authToken200'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "500":
          $ref: '#/components/responses/serverError'
components:
  responses:
    authToken200:
      description: A success response that includes the issued token, expire and other details from the OAuth Server
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenData'
    badRequest:
      description: Bad request
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    unauthorized:
      description: The client could not be authenticated.
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    forbidden:
      description: Forbidden.
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    serverError:
      description: unknown error
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
  schemas:
    TokenData:
      type: object
      properties:
        access_token:
          type: string
          description: The Access Token for the given token request
        token_type:
          type: string
          description: The Token Type issued
          example: Bearer
        expires_in:
          type: string
          description: The expiry time, in seconds
          example: "3600"
        refresh_token:
          type: string
          description: The refresh token, if applicable
        scope:
          type: string
          description: The issued scope
          example: oob
        id_token:
          type: string
          description: If the requested SCOPE included 'msso' or 'openid', response includes an id_token
        id_token_type:
          type: string
          description: If the requested SCOPE included 'msso' or 'openid', response includes an id_token_type
      title: TokenData