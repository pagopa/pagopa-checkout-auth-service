openapi: 3.0.3
info:
  title: OI Essential OIDC Endpoints - OpenAPI 3.0
  description: |-
    Essential OneIdentity OpenID Connect endpoints for authentication flow

    Some useful links:
    - [One Identity repository](https://github.com/pagopa/oneidentity)
    - [The source API definition for OI](https://github.com/pagopa/oneidentity/blob/c2b7f398d36a0f259685e785c8f5a6b80ba8b9eb/src/infra/api/oi.tpl.json)
  termsOfService: http://pagopa.it/terms/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
externalDocs:
  description: Find out more about OI
  url: https://pagopa.it
servers:
  - url: ${server_url}

paths:
  /oidc/authorize:
    get:
      tags:
        - Authorization Server APIs
      description: Initializes an OAuth 2.0 flow using a response_type. See RFC 6749 (https://tools.ietf.org/html/rfc6749) for more details. Authorization Servers MUST support the use of the HTTP GET and POST methods defined in RFC 7231 [RFC7231] at the Authorization Endpoint. Clients MAY use the HTTP GET or POST methods to send the Authorization Request to the Authorization Server. If using the HTTP GET method, the request parameters are serialized using URI Query String Serialization, per Section 13.1. If using the HTTP POST method, the request parameters are serialized using Form Serialization, per Section 13.2.
      operationId: Get_request_authorization
      parameters:
        - name: idp
          in: query
          required: true
          description: This is the requested 'idp' to initiate the authentication flow
          schema:
            type: string
        - name: client_id
          in: query
          required: true
          description: This is the 'client_id' of the requesting client. Maximum 255 characters.
          schema:
            type: string
        - name: response_type
          in: query
          required: true
          description: 'MUST be one of the listed available values. Any response_type other than ''code'' or ''token'' is only supported in conjunction with scope=openid. As per the OAuth specification: ''code'' is used for authorization code grant type flow, ''token'' is used for implicit grant type flow, ''token id_token'' is an extension provided by OpenID Connect, and ''code id_token'', ''id_token'', and ''none'' are extensions provided by OpenID Connect Multiple Response Types'
          schema:
            type: string
            enum:
              - code
              - token
              - token id_token
              - code id_token
              - id_token
              - code token
              - code id_token token
              - none
        - name: redirect_uri
          in: query
          required: true
          description: The 'redirect_uri' that was registered for this client. It is required if multiple redirect_uri's have been registered for this client. If the scope contains openid, this field becomes MANDATORY.
          schema:
            type: string
        - name: scope
          in: query
          required: true
          description: Only SCOPE values that were registered for this client will be granted. If only non-matching SCOPE values are requested, the request will fail.
          schema:
            type: string
        - name: nonce
          in: query
          required: true
          description: This is required for response_type 'token id_token'.  Typically, in an OpenID authorization scheme, the nonce represents a cryptographically strong random  string that is used to prevent intercepted responses from being reused.
          schema:
            type: string
        - name: state
          in: query
          required: true
          description: Value opaque to the server, used by the client to track its session. It will be returned as received.
          schema:
            type: string
        - name: X-Forwarded-For
          in: header
          required: true
          description: The X-Forwarded-For (XFF) request header is a de-facto standard header for identifying the originating IP address of a client connecting to a web server through a proxy server.
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/responseOkHtml'
        "302":
          $ref: '#/components/responses/auth302'
        "400":
          $ref: '#/components/responses/invalidParameters'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/methodNotAllowed'
        "429":
          $ref: '#/components/responses/rateLimit'
        "500":
          $ref: '#/components/responses/serverError'
  /oidc/token:
    post:
      tags:
        - Token Server APIs
      description: 'Request access_token or refresh_token using OAuth 2.0 grant_type: password authorization_code refresh_token client_credentials urn:ietf:params:oauth:grant-type:jwt-bearer urn:ietf:params:oauth:grant-type:saml2-bearer. See RFC 6749 for more details.'
      operationId: Create_request_token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - code
                - redirect_uri
                - grant_type
              properties:
                redirect_uri:
                  type: string
                  description: Required if grant_type is authorization_code. Must contain a valid auth code
                code:
                  type: string
                  description: Required if grant_type is authorization_code
                grant_type:
                  type: string
                  description: 'For grant_type=authorization_code: client_id, client_secret, code, and redirect_uri are required.'
                  enum:
                    - authorization_code
                  default: authorization_code
      parameters:
        - name: authorization
          in: header
          required: true
          description: 'The HTTP basic authorization header containing the client credentials as base64 encoded string (authorization: Basic base64(client_id:client_secret)). This can only be used INSTEAD of the parameters ''client_id'', ''client_secret''.'
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/authToken200'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/methodNotAllowed'
        "406":
          $ref: '#/components/responses/notAcceptable'
        "429":
          $ref: '#/components/responses/rateLimit'
        "500":
          $ref: '#/components/responses/serverError'
  /oidc/keys:
    get:
      tags:
        - Authorization Server APIs
      operationId: Get_jwk_set_
      description: This endpoint implements the JWKS_URI as specified at http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata
      responses:
        "200":
          description: JWK set containing public keys that enable clients to validate a JSON Web Token (JWT) issued by this OpenID Connect Provider
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: string
                    example:
                      - kty: RSA
                        kid: default_ssl_key
                        use: sig
                        n: 58BezRBeYOM3rOo1vcllcLc8QAwz6AmQj4EvGUqATMUz4bfYJ9Lf2wb9xCQhSLSkndfFAF5V754G0mRelBGK7yIja-M-EBXoJeT3nvwA46g7MkZGf11uP2dz2k4CkLdFHnlGzvuLQVBQpqbz-O_hFfEDxBk9zV4shR8O_iGv4fDi0dNHZfXzxkr_iH8Oj2qQeZFvv61I4RffeNmx04lYea2KFsF_8rWDlENWAr8RbqpY_y5lbxgC_xyBunTkoIEommqz55ZFIcklYerJUVSeIA90KMyM60wZh0JF_T5kuXEs-3AWh8Bkx-sVE2hu5S5x4_lADsPojLwWTT7or_sw9Q
                        e: AQAB
                    description: JWK set in JSON array format
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/methodNotAllowed'
        "429":
          $ref: '#/components/responses/rateLimit'
        "500":
          $ref: '#/components/responses/serverError'
      summary: OpenID Connect jwks endpoint
  /.well-known/openid-configuration:
    get:
      tags:
        - Authorization Server APIs
      operationId: Get_OpenIDDiscovery
      responses:
        "200":
          description: OpenID Discovery Configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenIDDiscovery'
        "403":
          $ref: '#/components/responses/forbidden'
        "405":
          $ref: '#/components/responses/methodNotAllowed'
        "429":
          $ref: '#/components/responses/rateLimit'
        "500":
          $ref: '#/components/responses/serverError'
      summary: OpenID Connect Discovery endpoint
      description: This endpoint follows the specification defined at http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata. It provides a mechanism for an OpenID Connect Relying Party to discover the End-User's OpenID Provider and obtain information needed to interact with it, including its OAuth 2.0 endpoint locations.
components:
  responses:
    auth302:
      description: 'Will contain either: A success response including the redirect location header to the server that handles the authentication.  The redirect parameter ''sessionData''s structure looks like the model schema shown OR ''invalid scope'' OR ''unsupported response type'' OR ''unauthorized client''. The non-successful conditions may include redirect query params as follows: ''error'', string with default value:  invalid_request ''error_description'', string with description of error ''state'', string with no default value.  It is opaque to the server and returned as received.'
      headers:
        location:
          description: 'Location (URL) includes these required parameters: action=(display or login depending on ''prompt'' and ''id_token_hint'') and sessionID and sessionData (a JWT containing a JSON message holding session data)'
          schema:
            type: string
        content-type:
          description: Content type response.
          schema:
            type: string
    responseOkHtml:
      description: OK
      headers:
        location:
          description: Response OK, serving html
          schema:
            type: string
        content-type:
          schema:
            type: string
      content:
        text/html:
          schema:
            type: string
    responseOkXml:
      description: OK
      headers:
        location:
          description: Response OK, serving xml
          schema:
            type: string
        content-type:
          schema:
            type: string
      content:
        application/xml:
          schema:
            type: string
    authToken200:
      description: A success response that includes the issued token, expire and other details from the OAuth Server
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenData'
    createdOkJson:
      description: Created
      headers:
        content-type:
          schema:
            type: string
      content:
        application/json:
          schema:
            type: string
    methodNotAllowed:
      description: The HTTP method is not valid
      headers:
        Allow:
          description: This header is required by RFC 2616 and contains a comma separated list of valid HTTP methods.
          schema:
            type: string
            default: GET
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    notAcceptable:
      description: The HyperText Transfer Protocol (HTTP) 406 Not Acceptable client error response code indicates that the server cannot produce a response matching the list of acceptable values defined in the request's proactive content negotiation headers, and that the server is unwilling to supply a default representation.
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
    rateLimit:
      description: Too many requests
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    badRequest:
      description: Bad request
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    invalidParameters:
      description: Invalid parameters | Invalid redirect_uri | invalid client type | invalid response type | invalid code_challenge/method | Bad request
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    unauthorized:
      description: The client could not be authenticated.
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    forbidden:
      description: Forbidden.
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    notFound:
      description: Not Found.
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
    serverError:
      description: unknown error
      headers:
        Pragma:
          description: Pragma browser directive
          schema:
            type: string
            default: no-cache
        Cache-Control:
          description: Cache-Control browser directive
          schema:
            type: string
            default: no-store
        content-type:
          description: Content type response.
          schema:
            type: string
  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: /.well-known/openid-configuration
    api_key:
      type: apiKey
      name: x-api-key
      in: header
  schemas:
    TokenData:
      type: object
      properties:
        access_token:
          type: string
          description: The Access Token for the given token request
        token_type:
          type: string
          description: The Token Type issued
          example: Bearer
        expires_in:
          type: string
          description: The expiry time, in seconds
          example: "3600"
        refresh_token:
          type: string
          description: The refresh token, if applicable
        scope:
          type: string
          description: The issued scope
          example: oob
        id_token:
          type: string
          description: If the requested SCOPE included 'msso' or 'openid', response includes an id_token
        id_token_type:
          type: string
          description: If the requested SCOPE included 'msso' or 'openid', response includes an id_token_type
      title: TokenData
    OpenIDDiscovery:
      required:
        - authorization_endpoint
        - id_token_signing_alg_values_supported
        - issuer
        - jwks_uri
        - response_types_supported
        - subject_types_supported
        - token_endpoint
      type: object
      properties:
        userinfo_endpoint:
          type: string
          example: https://example.org/oidc/v1/userinfo
          description: URL of the user info endpoint
        jwks_uri:
          type: string
          example: https://example.org/oidc/v1/keys
          description: URL of JSON Web Key Set document
        scopes_supported:
          items:
            type: string
          type: array
          example:
            - openid
          description: list of the OAuth 2.0 scope values that this server supports
        subject_types_supported:
          items:
            type: string
          type: array
          example:
            - pairwise
          description: list of the Subject Identifier types that this OP supports
        token_endpoint:
          type: string
          example: https://example.org/oidc/v1/token
          description: URL of the OAuth 2.0 token endpoint
        id_token_signing_alg_values_supported:
          items:
            type: string
          type: array
          example:
            - RS256
            - HS256
          description: list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT
        response_types_supported:
          items:
            type: string
          type: array
          example:
            - code
            - token_id_token
          description: ist of the OAuth 2.0 response_type values that this OP supports
        claims_supported:
          items:
            type: string
          type: array
          example:
            - sub
            - iss
            - auth_time
            - acr
          description: list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for
        authorization_endpoint:
          type: string
          example: https://example.org/oidc/v1/authorize
          description: URL of the OAuth 2.0 authorization endpoint
        issuer:
          type: string
          example: https://example.org
          description: the identifier of the token's issuer. This is identical to the 'iss' Claim value in ID Tokens
        grant_types_supported:
          items:
            type: string
          type: array
          example:
            - authorization_code
            - implicit
          description: list of the OAuth 2.0 Grant Type values that this OP supports
        acr_values_supported:
          items:
            type: string
          type: array
          example:
            - urn:mace:incommon:iap:silver
          description: list of the Authentication Context Class References that this OP supports
        token_endpoint_auth_methods_supported:
          items:
            type: string
          type: array
          example:
            - client_secret_basic
          description: list of Client Authentication methods supported by this Token Endpoint
        token_endpoint_auth_signing_alg_values_supported:
          items:
            type: string
          type: array
          example:
            - RS256
          description: list of the JWS signing algorithms (alg values) supported by the Token Endpoint for the signature on the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods. Servers SHOULD support RS256. The value none MUST NOT be used.
        display_values_supported:
          items:
            type: string
          type: array
          example:
            - page
            - popup
          description: list of the display parameter values that the OpenID Provider supports
        claim_types_supported:
          items:
            type: string
          type: array
          example:
            - normal
          description: list of the Claim Types that the OpenID Provider supports
        service_documentation:
          type: string
          example: https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth
          description: URL of a page containing human-readable information that developers might want or need to know when using the OpenID Provider
        ui_locales_supported:
          items:
            type: string
          type: array
          example:
            - en-US
            - en-GB
          description: Languages and scripts supported for the user interface
      description: 'The OpenID configuration document as defined by the specification: http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata'
